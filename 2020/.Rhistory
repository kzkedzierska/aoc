return(0)
}
subset_df <-
df %>%
filter(outside == bag)
inside <- subset_df$inside
new_n <- subset_df$inside_n
# print(inside)
# print(n * (1 +
#              sum(
#                unlist(
#                  lapply(1:length(inside),
#                         function(x) check_layer(inside[x], new_n[x])
#                         )))))
return(n * (1 +
sum(
unlist(
lapply(1:length(inside),
function(x) check_layer(inside[x], new_n[x])
)))))
}
check_layer("dark olive")
check_layer("shiny gold")
check_layer <- function(bag, n = 1, start = 1, df = demo_rules_df) {
if (bag == "no other") {
return(0)
}
subset_df <-
df %>%
filter(outside == bag)
inside <- subset_df$inside
new_n <- subset_df$inside_n
# print(inside)
# print(n * (1 +
#              sum(
#                unlist(
#                  lapply(1:length(inside),
#                         function(x) check_layer(inside[x], new_n[x])
#                         )))))
return(n * (start +
sum(
unlist(
lapply(1:length(inside),
function(x) check_layer(inside[x], new_n[x])
)))))
}
check_layer("shiny gold", start = 0)
demo_rules_df
rules_df <-
input %>%
as.data.frame() %>%
rename(input_text = 1) %>%
separate(input_text, sep = "contain", into = c("outside", "inside")) %>%
separate_rows(inside, sep = ",") %>%
mutate(outside = str_squish(str_remove(outside, "bag[s]*")),
inside = str_squish(str_remove(inside, "bag[s.]*"))) %>%
mutate(inside_n = str_extract(inside, "[0-9]*"),
inside = str_remove(inside, "[0-9]+ ")) %>%
mutate(inside_n = as.numeric(inside_n)) %>%
replace_na(list(inside_n = 0))
demo_rules_df <-
demo_input %>%
as.data.frame() %>%
rename(input_text = 1) %>%
separate(input_text, sep = "contain", into = c("outside", "inside")) %>%
separate_rows(inside, sep = ",") %>%
mutate(outside = str_squish(str_remove(outside, "bag[s]*")),
inside = str_squish(str_remove(inside, "bag[s.]*"))) %>%
mutate(inside_n = str_extract(inside, "[0-9]*"),
inside = str_remove(inside, "[0-9]+ ")) %>%
mutate(inside_n = as.numeric(inside_n)) %>%
replace_na(list(inside_n = 0))
check_layer("shiny gold", start = 0, df = rules_df)
check_layer <- function(bag, n = 1, start = 1, df = demo_rules_df) {
if (bag == "no other") {
return(0)
}
subset_df <-
df %>%
filter(outside == bag)
inside <- subset_df$inside
new_n <- subset_df$inside_n
return(n * (start +
sum(
unlist(
lapply(1:length(inside),
function(x) check_layer(inside[x], new_n[x], df = df)
)))))
}
check_layer("shiny gold", start = 0, df = rules_df)
read_lines("demo_input.txt")
read_lines("demo_input.txt") %>%
str_split(" ")
read_lines("demo_input.txt") %>%
str_split(" ") %>%
as.data.frame()
read_delim("demo_input.txt", delim = " ")
read_delim("demo_input.txt", delim = " ",
col_names = c("instruction", "n"))
read_delim("demo_input.txt", delim = " ",
col_names = c("instruction", "n")) %>%
mutate(exeucted = 0)
df <-
read_delim("demo_input.txt", delim = " ",
col_names = c("instruction", "n")) %>%
mutate(exeucted = 0)
df
df[1]
df[,1]
df[,1,]
df[[,,1]
]
df[1]
df[,1]
df[1,]
df[1,]$exeucted <- 9
df
df <-
read_delim("demo_input.txt", delim = " ",
col_names = c("instruction", "n")) %>%
mutate(exeucted = 0)
df
df <-
read_delim("demo_input.txt", delim = " ",
col_names = c("instruction", "n")) %>%
mutate(exeucted = 0)
pos <- 1
accum <- 0
while (TRUE) {
if (df[pos, ]$executed == 1) {
break
}
if (df[pos, ]$instruction == "acc") {
accum <- accum + df[pos, ]$n
} else if (df[pos, ]$instruction == "nop"){
pos <- pos + 1
} else {
pos <- pos + df[pos, ]$n
stopifnot(pos <= nrow(df), pos >= 1)
}
df[pos, ]$executed == 1
df <-
read_delim("demo_input.txt", delim = " ",
col_names = c("instruction", "n")) %>%
mutate(executed = 0)
df[pos, ]$instruction == "acc"
df[pos, ]$instruction == "nop"
while (TRUE) {
if (df[pos, ]$executed == 1) {
break
}
if (df[pos, ]$instruction == "acc") {
accum <- accum + df[pos, ]$n
} else if (df[pos, ]$instruction == "nop"){
pos <- pos + 1
} else {
pos <- pos + df[pos, ]$n
stopifnot(pos <= nrow(df), pos >= 1)
}
pos <- 1
accum <- 0
while (TRUE) {
if (df[pos, ]$executed == 1) {
break
}
df[pos, ]$executed <- df[pos, ]$executed + 1
if (df[pos, ]$instruction == "acc") {
accum <- accum + df[pos, ]$n
} else if (df[pos, ]$instruction == "nop"){
pos <- pos + 1
} else {
pos <- pos + df[pos, ]$n
stopifnot(pos <= nrow(df), pos >= 1)
}
accum
pos <- 1
accum <- 0
while (TRUE) {
if (df[pos, ]$executed == 1) {
break
}
df[pos, ]$executed <- df[pos, ]$executed + 1
if (df[pos, ]$instruction == "acc") {
print(df[pos,])
accum <- accum + df[pos, ]$n
} else if (df[pos, ]$instruction == "nop"){
pos <- pos + 1
} else {
pos <- pos + df[pos, ]$n
stopifnot(pos <= nrow(df), pos >= 1)
}
accum
df <-
read_delim("demo_input.txt", delim = " ",
col_names = c("instruction", "n")) %>%
mutate(executed = 0)
pos <- 1
accum <- 0
while (TRUE) {
if (df[pos, ]$executed == 1) {
break
}
print(df[pos,])
df[pos, ]$executed <- df[pos, ]$executed + 1
if (df[pos, ]$instruction == "acc") {
accum <- accum + df[pos, ]$n
} else if (df[pos, ]$instruction == "nop"){
pos <- pos + 1
} else {
pos <- pos + df[pos, ]$n
stopifnot(pos <= nrow(df), pos >= 1)
}
accum
pos <- 1
accum <- 0
while (TRUE) {
if (df[pos, ]$executed == 1) {
break
}
print(df[pos,])
df[pos, ]$executed <- df[pos, ]$executed + 1
if (df[pos, ]$instruction == "acc") {
accum <- accum + df[pos, ]$n
pos <- pos + 1
} else if (df[pos, ]$instruction == "nop"){
pos <- pos + 1
} else {
pos <- pos + df[pos, ]$n
stopifnot(pos <= nrow(df), pos >= 1)
}
accum
library(tidyverse)
df <-
read_delim("demo_input.txt", delim = " ",
col_names = c("instruction", "n")) %>%
mutate(executed = 0)
pos <- 1
accum <- 0
while (TRUE) {
if (df[pos, ]$executed == 1) {
break
}
print(df[pos,])
df[pos, ]$executed <- df[pos, ]$executed + 1
if (df[pos, ]$instruction == "acc") {
accum <- accum + df[pos, ]$n
pos <- pos + 1
} else if (df[pos, ]$instruction == "nop"){
pos <- pos + 1
} else {
pos <- pos + df[pos, ]$n
stopifnot(pos <= nrow(df), pos >= 1)
}
accum
df
execute_one_loop <- function(df) {
df <-
df %>%
mutate(executed = 0)
pos <- 1
accum <- 0
while (TRUE) {
if (df[pos, ]$executed == 1) {
break
}
df[pos, ]$executed <- df[pos, ]$executed + 1
if (df[pos, ]$instruction == "acc") {
accum <- accum + df[pos, ]$n
pos <- pos + 1
} else if (df[pos, ]$instruction == "jmp"){
pos <- pos + df[pos, ]$n
stopifnot(pos <= nrow(df), pos >= 1)
next
}
pos <- pos + 1
}
accum
}
df <-
read_delim("demo_input.txt", delim = " ",
col_names = c("instruction", "n"))
demo_df <-
read_delim("demo_input.txt", delim = " ",
col_names = c("instruction", "n"))
execute_one_loop(demo_df)
execute_one_loop <- function(df) {
df <-
df %>%
mutate(executed = 0)
pos <- 1
accum <- 0
while (TRUE) {
if (df[pos, ]$executed == 1) {
break
}
df[pos, ]$executed <- df[pos, ]$executed + 1
if (df[pos, ]$instruction == "acc") {
accum <- accum + df[pos, ]$n
} else if (df[pos, ]$instruction == "jmp"){
pos <- pos + df[pos, ]$n
stopifnot(pos <= nrow(df), pos >= 1)
next
}
pos <- pos + 1
}
accum
}
execute_one_loop(demo_df)
in_df <-
read_delim("input.txt", delim = " ",
col_names = c("instruction", "n"))
execute_one_loop(in_df)
execute_one_loop <- function(df) {
df <-
df %>%
mutate(executed = 0)
pos <- 1
accum <- 0
succ <- FALSE
while (TRUE) {
if (df[pos, ]$executed == 1) {
break
}
df[pos, ]$executed <- df[pos, ]$executed + 1
if (df[pos, ]$instruction == "acc") {
accum <- accum + df[pos, ]$n
} else if (df[pos, ]$instruction == "jmp"){
pos <- pos + df[pos, ]$n
stopifnot(pos <= nrow(df), pos >= 1)
next
}
pos <- pos + 1
if (pos > nrow(df)) {
succ <- TRUE
break
}
list(accumulator = accum, success = succ)
}
execute_one_loop(demo_df)
demo_df
demo_df$instruction %in% c("jmp", "nop")
which(demo_df$instruction %in% c("jmp", "nop"))
lapply(row_to_switch, function(row){
demo_input_switched <- demo_input
demo_input_switched[row, ]$instruction <-
setdiff(to_switch, demo_input_switched[row, ]$instruction)
c(execute_one_loop(demo_input_switched), row = row)
})
to_switch <- c("jmp", "nop")
row_to_switch <- which(demo_df$instruction %in% to_switch)
lapply(row_to_switch, function(row){
demo_input_switched <- demo_input
demo_input_switched[row, ]$instruction <-
setdiff(to_switch, demo_input_switched[row, ]$instruction)
c(execute_one_loop(demo_input_switched), row = row)
})
demo_input
to_switch <- c("jmp", "nop")
row_to_switch <- which(demo_df$instruction %in% to_switch)
lapply(row_to_switch, function(row){
demo_df_switched <- demo_df
demo_df_switched[row, ]$instruction <-
setdiff(to_switch, demo_df_switched[row, ]$instruction)
c(execute_one_loop(demo_df_switched), row = row)
})
lapply(row_to_switch, function(row){
demo_df_switched <- demo_df
demo_df_switched[row, ]$instruction <-
setdiff(to_switch, demo_df_switched[row, ]$instruction)
c(execute_one_loop(demo_df_switched), row = row) %>%
as_tibble()
})
lapply(row_to_switch, function(row){
demo_df_switched <- demo_df
demo_df_switched[row, ]$instruction <-
setdiff(to_switch, demo_df_switched[row, ]$instruction)
c(execute_one_loop(demo_df_switched), row = row) %>%
as_tibble()
}) %>%
bind_rows()
lapply(row_to_switch, function(row){
in_df_switched <- in_df
in_df_switched[row, ]$instruction <-
setdiff(to_switch,in_df_switched[row, ]$instruction)
c(execute_one_loop(in_df_switched), row = row) %>%
as_tibble()
}) %>%
bind_rows()
run_simulations <- function(df) {
to_switch <- c("jmp", "nop")
row_to_switch <- which(df$instruction %in% to_switch)
lapply(row_to_switch, function(row){
df_switched <- demo_df
df_switched[row, ]$instruction <-
setdiff(to_switch, df_switched[row, ]$instruction)
c(execute_one_loop(df_switched), row = row) %>%
as_tibble()
}) %>%
bind_rows()
}
run_simulations(demo_df)
run_simulations(in_df)
run_simulations <- function(df) {
to_switch <- c("jmp", "nop")
row_to_switch <- which(df$instruction %in% to_switch)
lapply(row_to_switch, function(row){
df_switched <- df
df_switched[row, ]$instruction <-
setdiff(to_switch, df_switched[row, ]$instruction)
c(execute_one_loop(df_switched), row = row) %>%
as_tibble()
}) %>%
bind_rows()
}
run_simulations(demo_df)
run_simulations(in_df)
execute_one_loop <- function(df) {
df <-
df %>%
mutate(executed = 0)
pos <- 1
accum <- 0
succ <- FALSE
while (TRUE) {
if (df[pos, ]$executed == 1) {
break
}
df[pos, ]$executed <- df[pos, ]$executed + 1
if (df[pos, ]$instruction == "acc") {
accum <- accum + df[pos, ]$n
} else if (df[pos, ]$instruction == "jmp"){
pos <- pos + df[pos, ]$n
if (pos <= nrow(df) | pos >= 1) {
return(list(accumulator = NA, success = FALSE))
}
next
}
pos <- pos + 1
if (pos > nrow(df)) {
succ <- TRUE
break
}
list(accumulator = accum, success = succ)
}
execute_one_loop(demo_df)
run_simulations(demo_df)
execute_one_loop <- function(df) {
df <-
df %>%
mutate(executed = 0)
pos <- 1
accum <- 0
succ <- FALSE
while (TRUE) {
if (df[pos, ]$executed == 1) {
break
}
df[pos, ]$executed <- df[pos, ]$executed + 1
if (df[pos, ]$instruction == "acc") {
accum <- accum + df[pos, ]$n
} else if (df[pos, ]$instruction == "jmp"){
pos <- pos + df[pos, ]$n
if (pos > nrow(df) | pos < 1) {
return(list(accumulator = NA, success = FALSE))
}
next
}
pos <- pos + 1
if (pos > nrow(df)) {
succ <- TRUE
break
}
list(accumulator = accum, success = succ)
}
execute_one_loop(demo_df)
run_simulations(in_df)
run_simulations(demo_df)
out_df <- run_simulations(in_df)
out_df
out_df %>% filter(success)
execute_one_loop <- function(df) {
df <-
df %>%
mutate(executed = 0)
pos <- 1
accum <- 0
succ <- FALSE
while (TRUE) {
if (df[pos, ]$executed == 1) {
break
}
df[pos, ]$executed <- df[pos, ]$executed + 1
if (df[pos, ]$instruction == "acc") {
accum <- accum + df[pos, ]$n
} else if (df[pos, ]$instruction == "jmp"){
pos <- pos + df[pos, ]$n
if (pos > nrow(df) | pos < 1) {
return(list(accumulator = accum, success = NA))
}
next
}
pos <- pos + 1
if (pos > nrow(df)) {
succ <- TRUE
break
}
list(accumulator = accum, success = succ)
}
execute_one_loop(demo_df)
out_df <- run_simulations(in_df)
out_df
out_df %>% filter(is.na(success))
