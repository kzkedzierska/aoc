replace_na(list(cube_status = "."))
df <-
df %>%
group_by(x, y, z, w) %>%
mutate(cube_status = check_cube_mutate_4d(x_cube = x, y_cube = y,
z_cube = z, w_cube = w,
cube_status = cube_status,
input_df = df)) %>%
filter(cube_status == "#")
}
df
}
demo_df_4d <-
demo_df %>%
mutate(w = 0)
out_df_4d <- simulate_mutate_4d(demo_df_4d, n = 1)
out_df_4d
out_df_4d %>% nrow() == 29
input_df <- demo_df_4d
temp_mat <- t(as.matrix(input_df[input_df$cube_status == "#",
c("x", "y", "z", "w")]))
temp_mat <- temp_mat - c(x_cube, y_cube, z_cube, w_cube) + 2
temp_mat <- t(temp_mat)
active_cubes_indices <- temp_mat[apply(temp_mat, 1,
function(row) all(row %in% 1:3))]
active_cubes_indices
active_cubes_indices <- temp_mat[apply(temp_mat, 1,
function(row) all(row %in% 1:3)),]
active_cubes_indices
cube_mat[active_cubes_indices]
cube_mat <- array(0, dim = rep(3, 4))
cube_mat
cube_mat[active_cubes_indices]
apply(temp_mat, 1,
function(row) all(row %in% 1:3))
temp_mat
temp_mat[apply(temp_mat, 1,
function(row) all(row %in% 1:3)),]
temp_mat[apply(temp_mat, 1,
function(row) all(row %in% 1:3))]
temp_mat[c(T, T)]
temp_mat[c(T, T), ]
temp_mat[c(T, T, FALSE), ]
temp_mat[1, ]
cube_mat[temp_mat[1, ]]
cube_mat
cube_mat[ rbind(c(1, 1,1,1), c(1,2,3,1))]
cube_mat[ rbind(c(1, 1,1,1), c(1,2,3,1))] <- 1
cube_mat
rbind(c(1, 1,1,1), c(1,2,3,1))
temp_mat[1, ]
colnames(temp_mat) <- NULL
temp_mat[1, ]
cube_mat[temp_mat[1, ]]
cube_mat[rbind(c(1, 1,1,1), c(1,2,3,1))]
cube_mat[rbind(c(1, 1,1,1))]
temp_mat
str(temp_mat)
str(rbind(c(1, 1,1,1), c(1,2,3,1)))
str(as.matrix(temp_mat))
str(as.numeric(temp_mat))
as.numeric(temp_mat)
matrix(as.numeric(temp_mat), nrow = 4)
temp_mat
matrix(as.numeric(temp_mat), ncol= 4)
cube_mat[matrix(as.numeric(temp_mat), ncol= 4)]
check_cube_mutate_4d <- function(x_cube, y_cube, z_cube, w_cube,
cube_status, input_df) {
temp_mat <- t(as.matrix(input_df[input_df$cube_status == "#",
c("x", "y", "z", "w")]))
temp_mat <- temp_mat - c(x_cube, y_cube, z_cube, w_cube) + 2
temp_mat <- t(temp_mat)
colnames(temp_mat) <- NULL
temp_mat <- temp_mat[apply(temp_mat, 1,
function(row) all(row %in% 1:3)),]
active_cubes_indices <- matrix(as.numeric(temp_mat), ncol = 4)
cube_mat <- array(0, dim = rep(3, 4))
cube_mat[active_cubes_indices] <- 1
n_active_cubes <- sum(cube_mat) - ifelse(cube_status == "#", 1, 0)
new_cube_status = "."
if (cube_status == "." & n_active_cubes == 3) {
new_cube_status = "#"
} else if (cube_status == "#" & n_active_cubes %in% 2:3) {
new_cube_status = "#"
}
return(new_cube_status)
}
simulate_mutate_4d <- function(input_df, n = 1) {
df <- input_df %>%
filter(cube_status == "#")
for (simulation in 1:n) {
xs <- (min(df$x)-1):(max(df$x)+1)
ys <- (min(df$y)-1):(max(df$y)+1)
zs <- (min(df$z)-1):(max(df$z)+1)
ws <- (min(df$w)-1):(max(df$w)+1)
# get all the grid needed to be checked
full_df <-
expand_grid(x = xs, y = ys, z = zs, w = ws)
df <-
df %>%
right_join(full_df, by = c("x", "y", "z", "w")) %>%
replace_na(list(cube_status = "."))
df <-
df %>%
group_by(x, y, z, w) %>%
mutate(cube_status = check_cube_mutate_4d(x_cube = x, y_cube = y,
z_cube = z, w_cube = w,
cube_status = cube_status,
input_df = df)) %>%
filter(cube_status == "#")
}
df
}
demo_df_4d <-
demo_df %>%
mutate(w = 0)
out_df_4d <- simulate_mutate_4d(demo_df_4d, n = 1)
out_df_4d %>% nrow() == 29
profvis::profvis(simulate_mutate_4d(demo_df_4d))
profvis::profvis(simulate_mutate_4d(demo_df_4d, n = 3))
out_df_4d <- simulate_mutate_4d(demo_df_4d, n = 6)
out_df_4d %>% nrow() == 848
benchmark_df <-
microbenchmark::microbenchmark(simulate_4d(demo_df_4d),
simulate_mutate_4d(demo_df_4d),
simulate(demo_df),
simulate_mutate(demo_df), times = 10)
benchmark_df %>%
mutate(time_mili = time / 1000000) %>%
ggplot(aes(x = expr, y = time_mili)) +
geom_jitter() +
geom_boxplot(width = 0.2, alpha = 0.1, outlier.shape = NA, color = "grey60") +
labs(x = "",
y = "Time [miliseconds]") +
expand_limits(y = 0) +
theme_classic() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
input_df_4d <-
input_df %>%
mutate(w = 0)
start_mutate_4d <- Sys.time()
out_df_mutate_4d <- simulate_mutate_4d(input_df_4d,
n = n_simulations)
stop_mutate_4d <- Sys.time()
time_diff_mutate_4d <- difftime(stop_mutate_4d, start_mutate_4d,
units = "secs")
result_mutate_4d <-
out_df_mutate_4d %>%
nrow()
glue::glue(
paste("The mutate 4D version run {n_simulations} simulations on the {input_file}.",
"It took this program {time_diff_mutate_4d} secs to execute.",
"There are {result_mutate_4d} active cubes."))
488/60
input_df
input_file <- "input.txt"
input_df <-
strsplit(scan(input_file, what=""), "") %>%
do.call(rbind, .) %>%
as_tibble() %>%
mutate(x = 1:n(), z = 0) %>%
pivot_longer(names_to = "y", names_prefix = "V", names_ptypes = numeric(),
values_to = "cube_status", -c(x, z)) %>%
mutate(across(c(x, y, z), as.numeric))
n_simulations <- 6
check_cube_mutate_4d <- function(x_cube, y_cube, z_cube, w_cube,
cube_status, input_df) {
x <- (x_cube-1):(x_cube+1)
y <- (y_cube-1):(y_cube+1)
z <- (z_cube-1):(z_cube+1)
w <- (w_cube-1):(w_cube+1)
cube_neighbour_df <-
expand_grid(x, y, z, w) %>%
filter(!(x == x_cube & y == y_cube & z == z_cube & w == w_cube))
active_cubes <-
input_df %>%
inner_join(cube_neighbour_df,
by = c("x", "y", "z", "w")) %>%
filter(cube_status == "#") %>%
nrow()
new_cube_status = "."
if (cube_tibble$cube_status == "." & active_cubes == 3) {
new_cube_status = "#"
} else if (cube_tibble$cube_status == "#" & active_cubes %in% 2:3) {
new_cube_status = "#"
}
return(new_cube_status)
}
simulate_mutate_4d <- function(input_df, n = 1) {
df <- input_df
for (simulation in 1:n) {
xs <- (min(df$x)-1):(max(df$x)+1)
ys <- (min(df$y)-1):(max(df$y)+1)
zs <- (min(df$z)-1):(max(df$z)+1)
ws <- (min(df$w)-1):(max(df$w)+1)
full_df <-
expand_grid(x = xs, y = ys,  z = zs, w = ws)
df <-
df %>%
right_join(full_df, by = c("x", "y", "z", "w")) %>%
replace_na(list(cube_status = "."))
df <-
df %>%
group_by(x, y, z) %>%
mutate(cube_status = check_cube_mutate_4d(x_cube = x, y_cube = y,
z_cube = z, w_cube = w,
cube_status = cube_status,
input_df = df)) %>%
filter(cube_status == "#")
}
df
}
simulate_mutate_4d(demo_df_4d, n = 1)
check_cube_mutate_4d <- function(x_cube, y_cube, z_cube, w_cube,
cube_status, input_df) {
x <- (x_cube-1):(x_cube+1)
y <- (y_cube-1):(y_cube+1)
z <- (z_cube-1):(z_cube+1)
w <- (w_cube-1):(w_cube+1)
cube_neighbour_df <-
expand_grid(x, y, z, w) %>%
filter(!(x == x_cube & y == y_cube & z == z_cube & w == w_cube))
active_cubes <-
input_df %>%
inner_join(cube_neighbour_df,
by = c("x", "y", "z", "w")) %>%
filter(cube_status == "#") %>%
nrow()
new_cube_status = "."
if (cube_status == "." & active_cubes == 3) {
new_cube_status = "#"
} else if (cube_status == "#" & active_cubes %in% 2:3) {
new_cube_status = "#"
}
return(new_cube_status)
}
simulate_mutate_4d(demo_df_4d, n = 1)
simulate_mutate_4d <- function(input_df, n = 1) {
df <- input_df
for (simulation in 1:n) {
xs <- (min(df$x)-1):(max(df$x)+1)
ys <- (min(df$y)-1):(max(df$y)+1)
zs <- (min(df$z)-1):(max(df$z)+1)
ws <- (min(df$w)-1):(max(df$w)+1)
full_df <-
expand_grid(x = xs, y = ys,  z = zs, w = ws)
df <-
df %>%
right_join(full_df, by = c("x", "y", "z", "w")) %>%
replace_na(list(cube_status = "."))
df <-
df %>%
group_by(x, y, z, w) %>%
mutate(cube_status = check_cube_mutate_4d(x_cube = x, y_cube = y,
z_cube = z, w_cube = w,
cube_status = cube_status,
input_df = df)) %>%
filter(cube_status == "#")
}
df
}
simulate_mutate_4d(demo_df_4d, n = 1)
is.finite(1)
x = c(1, NA, NaN, Inf)
is.finite(x)
1:4 %in% 2:9
all(1:4 %in% 2:9)
rep("#", 7) %in% c("#", ".")
input_df %>% summarise_all(class)
input_df %>% select(-cube_status) %>% summarise_all(class) %>% unique()
input_df %>% select(-cube_status) %>% summarise_all(class) == "numeric"
all(input_df %>% select(-cube_status) %>% summarise_all(class) == "numeric")
typeof(input_df)
class(input_df)
"data.frame" %in% class(input_df)
library(tidyverse)
read_tsv("demo_input.txt")
read_tsv("demo_input.txt" col_names = "number")
read_tsv("demo_input.txt", col_names = "number")
read_tsv("demo_input.txt", col_names = "number") %>%
mutate(tmp = lag(number, 5))
read_tsv("demo_input.txt", col_names = "number") %>%
mutate(tmp = lag(number, 1:5))
read_tsv("demo_input.txt", col_names = "number") %>%
mutate(tmp = lag(number, 5))
read_tsv("demo_input.txt", col_names = "number") %>%
mutate(tmp = c(lag(number, 5), lag(number, 4)))
demo_input_vec <-
read_tsv("demo_input.txt", col_names = "number") %>%
pull(number)
demo_input_vec
demo_input_vec[6:]
demo_input_vec[6:length(demo_input_vec)]
demo_input_vec
demo_input_vec[6:length(demo_input_vec)]
combn(demo_input_vec[1:5], 2)
combn(demo_input_vec[1:5], 2) %>%
apply(2, sum)
demo_input_vec
length(demo_input_vec)
5:length(demo_input_vec)
(5+1):length(demo_input_vec) - 5
(5+1):length(demo_input_vec)
check_vector <- function(input_vec, n = 5) {
starts <- (n+1):length(input_vec) - 5
stops <- (n):(length(input_vec)-1)
numbs <- (n+1):length(input_vec)
lapply(1:length(numbs), function(i) check_number(input_vec[starts[i]:stops[i]],
input_vec[numbs[i]]))
}
check_number <- function(vec, numb) {
all_sums <-
combn(vec, 2) %>%
apply(2, sum)
numb %in% all_sums
}
check_number(c(35, 20, 15, 25, 47), 40)
check_number(c(35, 20, 15, 25, 47), 49)
check_vector <- function(input_vec, n = 5) {
starts <- (n+1):length(input_vec) - 5
stops <- (n):(length(input_vec)-1)
numbs <- (n+1):length(input_vec)
out_vec <-
lapply(1:length(numbs), function(i) check_number(input_vec[starts[i]:stops[i]],
input_vec[numbs[i]])) %>%
unlist()
c(rep(NA, n), out_vec)
}
check_vector(demo_input_vec)
which(!check_vector(demo_input_vec))
demo_input_vec[check_vector(demo_input_vec))] == 127
demo_input_vec[check_vector(demo_input_vec)] == 127
benchmark_df <-
microbenchmark::microbenchmark(simulate(demo_df),
simulate_mutate(demo_df), times = 10)
benchmark_df %>%
autoplot()
demo_input_vec[check_vector(demo_input_vec)]
demo_input_vec[!check_vector(demo_input_vec)]
demo_input_vec[which(!check_vector(demo_input_vec))]
input_vec <-
read_tsv("input.txt", col_names = "number") %>%
pull(number)
input_vec[which(!check_vector(input_vec))[1]]
input_vec[which(!check_vector(input_vec, n = 25))[1]]
check_vector(input_vec, n = 25)
input_vec
input_vec[1:25]
combn(input_vec[1:25], 2) %>% apply(2, sum)
input_vec[26]
starts <- (n+1):length(input_vec) - n
check_number <- function(vec, numb) {
all_sums <-
combn(vec, 2) %>%
apply(2, sum)
numb %in% all_sums
}
check_vector <- function(input_vec, n = 5) {
starts <- (n+1):length(input_vec) - n
stops <- (n):(length(input_vec)-1)
numbs <- (n+1):length(input_vec)
out_vec <-
lapply(1:length(numbs), function(i) check_number(input_vec[starts[i]:stops[i]],
input_vec[numbs[i]])) %>%
unlist()
c(rep(NA, n), out_vec)
}
input_vec[which(!check_vector(input_vec, n = 25))[1]]
combn(demo_input_vec, 1:12)
lapply(1:length(demo_input_vec),
function(n) combn(demo_input_vec, n) %>% apply(2, sum))
cumsum(demo_input_vec)
1:length(demo_input_vec)
combn(1:length(demo_input_vec), 2)
all_comb <- combn(1:length(demo_input_vec), 2)
all_comb %>% head(())
all_comb %>% head(
)
all_comb[1:5,]
all_comb[1,5]
all_comb[5]
all_comb[5,]
all_comb[1,]
all_comb[,1:5]
apply(all_comb[,1:5], 2, function(col) sum(input_vec[min(col):max(col)]))
apply(all_comb[,1:5], 2,
function(col)
{
all_sum <- sum(input_vec[min(col):max(col)])
min_max_sum <- sum(min(input_vec[min(col):max(col)]),
max(input_vec[min(col):max(col)]))
c(all_sum, min_max_sum)
})
apply(all_comb[, 1:5], 2,
function(col)
{
all_sum <- sum(input_vec[min(col):max(col)])
min_max_sum <- sum(min(input_vec[min(col):max(col)]),
max(input_vec[min(col):max(col)]))
c(all_sum, min_max_sum)
}) %>% t() %>%
as_tibble()
apply(all_comb[, 1:5], 2,
function(col)
{
all_sum <- sum(input_vec[min(col):max(col)])
min_max_sum <- sum(min(input_vec[min(col):max(col)]),
max(input_vec[min(col):max(col)]))
c(all_sum, min_max_sum)
}) %>%
t() %>%
as_tibble(col_names = c("all", "min_max"))
all_sums_df <-
apply(all_comb[, 1:5], 2,
function(col)
{
all_sum <- sum(input_vec[min(col):max(col)])
min_max_sum <- sum(min(input_vec[min(col):max(col)]),
max(input_vec[min(col):max(col)]))
c(all_sum, min_max_sum)
}) %>%
t() %>%
as_tibble() %>%
rename(all = V1, min_max = V2))
all_sums_df <-
apply(all_comb[, 1:5], 2,
function(col)
{
all_sum <- sum(input_vec[min(col):max(col)])
min_max_sum <- sum(min(input_vec[min(col):max(col)]),
max(input_vec[min(col):max(col)]))
c(all_sum, min_max_sum)
}) %>%
t() %>%
as_tibble() %>%
rename(all = V1, min_max = V2)
all_sums_df
all_sums_df <-
apply(all_comb, 2,
function(col)
{
all_sum <- sum(input_vec[min(col):max(col)])
min_max_sum <- sum(min(input_vec[min(col):max(col)]),
max(input_vec[min(col):max(col)]))
c(all_sum, min_max_sum)
}) %>%
t() %>%
as_tibble() %>%
rename(all = V1, min_max = V2)
all_sums_df %>%
filter(all == 127)
all_comb
demo_input_vec[3:7]
sum(demo_input_vec[3:7])
sum(demo_input_vec[3:6])
all_comb
all_comb[1]==3
all_comb[1,]==3
all_comb[1,]==3 & all_comb[2,] == 6
which(all_comb[1,]==3 & all_comb[2,] == 6)
all_sums_df %>% filter(row_number() = =40)
all_sums_df %>% filter(row_number() == 40)
all_sums_df <-
apply(all_comb, 2,
function(col)
{
all_sum <- sum(input_vec[min(col):max(col)])
min_max_sum <- sum(min(input_vec[min(col):max(col)]),
max(input_vec[min(col):max(col)]))
c(min(col), max(col), all_sum, min_max_sum)
}) %>%
t() %>%
as_tibble() %>%
rename(start = V1, stop = V2, all = V3, min_max = V4)
all_sums_df %>%
filter(start == 3, stop == 6)
check_vector <- function(in_vec, n = 5) {
starts <- (n+1):length(in_vec) - n
stops <- (n):(length(in_vec)-1)
numbs <- (n+1):length(in_vec)
out_vec <-
lapply(1:length(numbs), function(i) check_number(in_vec[starts[i]:stops[i]],
in_vec[numbs[i]])) %>%
unlist()
c(rep(NA, n), out_vec)
}
demo_input_vec[which(!check_vector(demo_input_vec))] == 127
find_encryption_weakness <- function(in_vec, sum_in_question) {
all_comb_vec <- combn(1:length(in_vec), 2)
all_sums_df <-
apply(all_comb_vec, 2,
function(col)
{
all_sum <- sum(in_vec[min(col):max(col)])
min_max_sum <- sum(min(in_vec[min(col):max(col)]),
max(in_vec[min(col):max(col)]))
c(min(col), max(col), all_sum, min_max_sum)
}) %>%
t() %>%
as_tibble() %>%
rename(start = V1, stop = V2, all = V3, min_max = V4)
all_sums_df %>%
filter(all == sum_in_question) %>%
pull(min_max)
}
find_encryption_weakness(demo_input_vec, 127)
input_vec <-
read_tsv("input.txt", col_names = "number") %>%
pull(number)
first_wrong_number <- input_vec[which(!check_vector(input_vec, n = 25))[1]]
first_wrong_number
find_encryption_weakness(input_vec, first_wrong_number)
