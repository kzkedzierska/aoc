i_dont_know1 <- sorted_vec[which(sorted_vec - lag(sorted_vec, 2) == 3)]
print(sort(i_dont_know1))
i_dont_know2 <- sorted_vec[which(sorted_vec - lag(sorted_vec, 3) == 3)]
print(sort(i_dont_know2))
}
get_essential_elements(demo_input_vec2)
get_essential_elements(demo_input_vec)
demo_input_vec
sort(demo_input_vec)
sort(demo_input_vec2)
cut(sort(demo_input_vec2), seq(0, 49, 3))
cut(sort(demo_input_vec2), seq(0,52, 3))
cut(sort(demo_input_vec2), seq(0,52, 3)) %>% table()
z <- cut(sort(demo_input_vec2), seq(0,52, 3)) %>% table()
z[z==3] <- 6
z[z==2] <- 3
prod(z)
z
z <- cut(sort(demo_input_vec), seq(0, max(demo_input_vec)+3, 3)) %>% table()
z[z==3] <- 6
z[z==2] <- 3
z
prod(z)
z <- cut(sort(demo_input_vec), seq(0, max(demo_input_vec)+3, 3)) %>% table()
z
z - 1
z
z <- cut(sort(1:6), seq(0, max(1:6)+3, 3)) %>% table()
z
z <- cut(sort(demo_input_vec2), seq(0,52, 3)) %>% table()
z
z[z==3] <- 7
z[z==2] <- 3
sum(z)
z
z[z==1] <- 0
sum(z)
z <- cut(sort(demo_input_vec), seq(0,max(demo_input_vec)+3, 3)) %>% table()
z[z==3] <- 7
z[z==2] <- 3
z[z==1] <- 0
z
f <- function(n, vec, prev_n = 0){
if (n == length(vec)) {
return(1)
}
if (prev_n = 0 & n == 1) {
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n - 1))
}
f <- function(n, vec, prev_n = 0){
if (n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n - 1))
}
diff_before <- vec[n] - vec[prev_n]
if (before > 3) {
return(0)
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(demo_input_vec)
f(2, demo_input_vec, 1)
f <- function(n, vec, prev_n = 0){
if (n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n - 1))
}
diff_before <- vec[n] - vec[prev_n]
if (diff_before > 3) {
return(0)
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(2, demo_input_vec, 1)
f(2, c(0, demo_input_vec, 22), 1)
f <- function(n, vec, prev_n = 0){
print(n)
if (n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n - 1))
}
diff_before <- vec[n] - vec[prev_n]
if (diff_before > 3) {
return(0)
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(2, c(0, demo_input_vec, 22), 1)
f <- function(n, vec, prev_n = 0){
print(n)
if (n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n - 1))
}
diff_before <- vec[n] - vec[prev_n]
print(diff_before)
if (diff_before > 3) {
return(0)
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(2, c(0, demo_input_vec, 22), 1)
f(2, c(0, sorted(demo_input_vec), 22), 1)
f(2, c(0, sort(demo_input_vec), 22), 1)
#print(n)
if (n == length(vec)) {
return(1)
}
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n - 1))
}
diff_before <- vec[n] - vec[prev_n]
#print(diff_before)
if (diff_before > 3) {
return(0)
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(2, c(0, sort(demo_input_vec), 22), 1)
#print(n)
if (prev_n == length(vec)) {
return(1)
}
f <- function(n, vec, prev_n = 0){
#print(n)
if (prev_n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n - 1))
}
diff_before <- vec[n] - vec[prev_n]
#print(diff_before)
if (diff_before > 3) {
return(0)
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(2, c(0, sort(demo_input_vec), 22), 1)
#print(n)
if (n == length(vec)) {
return(1)
}
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n - 1))
}
diff_before <- vec[n] - vec[prev_n]
#print(diff_before)
if (diff_before > 3) {
return(0)
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(2, c(0, sort(demo_input_vec), 22), 1)
glue::glue("n: {n}, vec[n]: {vec[n]}, vec[prev_n]: {vec[prev_n]}")
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n - 1))
}
glue::glue("n: {n}, vec[n]: {vec[n]}, vec[prev_n]: {vec[prev_n]}")
diff_before <- vec[n] - vec[prev_n]
#print(diff_before)
if (diff_before > 3) {
return(0)
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(2, c(0, sort(demo_input_vec), 22), 1)
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n - 1))
}
print(glue::glue("n: {n}, vec[n]: {vec[n]}, vec[prev_n]: {vec[prev_n]}"))
diff_before <- vec[n] - vec[prev_n]
#print(diff_before)
if (diff_before > 3) {
return(0)
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(2, c(0, sort(demo_input_vec), 22), 1)
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n - 1))
}
diff_before <- vec[n] - vec[prev_n]
print(glue::glue("n: {n}, vec[n]: {vec[n]}, vec[prev_n]: {vec[prev_n]}, diff: {diff_before}"))
#print(diff_before)
if (diff_before > 3) {
print("returning zero")
return(0)
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(2, c(0, sort(demo_input_vec), 22), 1)
sort(demo_input_vec)
return(f(n+1, vec, n))
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n - 1))
}
diff_before <- vec[n] - vec[prev_n]
print(glue::glue("n: {n}, vec[n]: {vec[n]}, vec[prev_n]: {vec[prev_n]}, diff: {diff_before}"))
#print(diff_before)
if (diff_before > 3) {
print("returning zero")
return(0)
}
if (diff_before == 3) {
return(f(n+1, vec, n))
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(2, c(0, sort(demo_input_vec), 22), 1)
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n - 1))
}
diff_before <- vec[n] - vec[prev_n]
if (diff_before > 3) {
print("returning zero")
return(0)
}
if (diff_before == 3) {
return(f(n+1, vec, n))
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(2, c(0, sort(demo_input_vec), 22), 1)
if (diff_before > 3) {
return(0)
}
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n - 1))
}
diff_before <- vec[n] - vec[prev_n]
if (diff_before > 3) {
return(0)
}
if (diff_before == 3) {
return(f(n+1, vec, n))
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(2, c(0, sort(demo_input_vec), 22), 1) == 8
f(2, c(0, sort(demo_input_vec2), max(demo_input_vec2)+3), 1)
f(1, c(0, sort(demo_input_vec), 22), 0) == 8
return(f(n + 1, vec, n))
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n))
}
diff_before <- vec[n] - vec[prev_n]
if (diff_before > 3) {
return(0)
}
if (diff_before == 3) {
return(f(n+1, vec, n))
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(1, c(0, sort(demo_input_vec), 22), 0) == 8
f(1, c(0, sort(demo_input_vec2), max(demo_input_vec2)+3))
f(1, 45:49)
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n))
}
diff_before <- vec[n] - vec[prev_n]
print(glue::glue(paste(
"n: {n}",
"n-1: {prev_n}",
"a_n: {vec[n]",
"a_n-1: {vec[prev_n]}",
"a_n - a_n-1: {diff_before}"
)))
if (diff_before > 3) {
return(0)
}
if (diff_before == 3) {
return(f(n+1, vec, n))
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(1, c(0, sort(demo_input_vec), 22), 0) == 8
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n))
}
diff_before <- vec[n] - vec[prev_n]
print(glue::glue(paste(
"n: {n}",
"n-1: {prev_n}",
"a_n: {vec[n]}",
"a_n-1: {vec[prev_n]}",
"a_n - a_n-1: {diff_before}"
)))
if (diff_before > 3) {
return(0)
}
if (diff_before == 3) {
return(f(n+1, vec, n))
}
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(1, c(0, sort(demo_input_vec), 22), 0) == 8
f(1, 45:49)
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
print(vec[n])
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n))
}
diff_before <- vec[n] - vec[prev_n]
print(glue::glue(paste(
"n: {n}",
"n-1: {prev_n}",
"a_n: {vec[n]}ff",
"a_n-1: {vec[prev_n]}",
"a_n - a_n-1: {diff_before}"
)))
if (diff_before > 3) {
return(0)
}
if (diff_before == 3) {
print(vec[n])
return(f(n+1, vec, n))
}
print(paste(c(vec[n], "x")))
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(1, c(0, sort(demo_input_vec), 22), 0) == 8
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
print(vec[n])
return(1)
}
if (prev_n == 0 & n == 1) {
return(f(n + 1, vec, n))
}
diff_before <- vec[n] - vec[prev_n]
# print(glue::glue(paste(
#   "n: {n}",
#   "n-1: {prev_n}",
#   "a_n: {vec[n]}ff",
#   "a_n-1: {vec[prev_n]}",
#   "a_n - a_n-1: {diff_before}"
# )))
if (diff_before > 3) {
return(0)
}
if (diff_before == 3) {
print(vec[n])
return(f(n+1, vec, n))
}
print(paste(c(vec[n], "x")))
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(1, 45:49)
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
print(vec[n])
return(1)
}
if (prev_n == 0 & n == 1) {
print(vec[n])
return(f(n + 1, vec, n))
}
diff_before <- vec[n] - vec[prev_n]
# print(glue::glue(paste(
#   "n: {n}",
#   "n-1: {prev_n}",
#   "a_n: {vec[n]}ff",
#   "a_n-1: {vec[prev_n]}",
#   "a_n - a_n-1: {diff_before}"
# )))
if (diff_before > 3) {
return(0)
}
if (diff_before == 3) {
print(vec[n])
return(f(n+1, vec, n))
}
print(paste(c(vec[n], "x")))
return(f(n+1, vec, n) + f(n+1, vec, n-1))
}
f(1, 45:49)
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
print(vec[n])
return(1)
}
if (prev_n == 0 & n == 1) {
print(vec[n])
return(f(n + 1, vec, n))
}
diff_before <- vec[n] - vec[prev_n]
# print(glue::glue(paste(
#   "n: {n}",
#   "n-1: {prev_n}",
#   "a_n: {vec[n]}ff",
#   "a_n-1: {vec[prev_n]}",
#   "a_n - a_n-1: {diff_before}"
# )))
if (diff_before > 3) {
return(0)
}
if (diff_before == 3) {
print(vec[n])
return(f(n+1, vec, n))
}
print(paste(c(vec[n], "x")))
return(f(n+1, vec, n) + f(n+1, vec, prev_n))
}
f(1, 45:49)
#print(vec[n])
return(1)
f <- function(n, vec, prev_n = 0){
#print(n)
if (n == length(vec)) {
#print(vec[n])
return(1)
}
if (prev_n == 0 & n == 1) {
#print(vec[n])
return(f(n + 1, vec, n))
}
diff_before <- vec[n] - vec[prev_n]
# print(glue::glue(paste(
#   "n: {n}",
#   "n-1: {prev_n}",
#   "a_n: {vec[n]}ff",
#   "a_n-1: {vec[prev_n]}",
#   "a_n - a_n-1: {diff_before}"
# )))
if (diff_before > 3) {
return(0)
}
if (diff_before == 3) {
#print(vec[n])
return(f(n+1, vec, n))
}
#print(paste(c(vec[n], "x")))
return(f(n+1, vec, n) + f(n+1, vec, prev_n))
}
f(1, 45:49)
f(1, demo_input_vec)
demo_input_vec
f(1, c(0, sort(demo_input_vec), 22), 0) == 8
f(1, c(0, sort(demo_input_vec2), max(demo_input_vec2)+3))
