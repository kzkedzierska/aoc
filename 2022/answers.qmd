---
title: "Advent of Code 2022"
author: "Kasia Kedzierska"
date: last-modified
format: 
  html:
    theme: 
      light: sandstone
      dark: solar
    self-contained: true
    toc: true
    toc-location: left
    code-block-border-left: true
    code-block-bg: true
    highlight-style: github
    sidebar:
      style: docked
project:
  execute-dir: project
---

## Intro

This notebook contains the solutions to the [Advent of Code 2022 problems](https://adventofcode.com/). The repository with source code for this notebook (and solutions for AoC 2020) can be found [here](https://github.com/kzkedzierska/aoc).

### Summary

```{bash}
#| label: generte-input-stars-summary
#| echo: false
#| message: false
#| warning: false
bash ./misc/generate_input_for_summary_table.sh
```


```{r}
#| label: stars-summary
#| echo: false
#| message: false
#| warning: false
require(reticulate)
library(dplyr)
library(gt)
# https://stackoverflow.com/a/65835640
hp_table <- function(x) {
  gt(x) %>% 
    #tab_options(column_labels.hidden = TRUE) %>% 
  fmt_markdown(columns = everything()) %>%
  opt_table_lines() %>%
  cols_width(Day ~ px(40),
             everything() ~ px(60)) %>%
  cols_align(align = "center",
             everything()) %>%
  cols_align(align = "right",
             Day) %>%
  as_raw_html() # return as html
}

empty_days_df <-
  tibble::tibble(day = 1:25)

# read in the stars generated from the headers in this file
stars_df <-
  readr::read_tsv("misc/stars", col_names = "stars",
                  show_col_types = FALSE) %>%
  
  dplyr::mutate(
    # assumin part two follows part one, all in order, no skipping
    part = dplyr::case_when(
      dplyr::row_number() %% 2 == 0 ~ "Part 2",
      TRUE ~ "Part 1"), 
    # get the day, assuming all headers are in order,
    day = (dplyr::row_number()+1) %/% 2
  ) %>%
  tidyr::pivot_wider(names_from = "part", 
                     values_from = "stars")

# read in the solved days, generated from headers of this file
readr::read_tsv(col_names = "header", file = "misc/solved_days", 
                show_col_types = FALSE) %>%
  # create the hyperlink to the contents
  dplyr::mutate(day = stringr::str_extract(header, "[0-9]+"), 
                day = as.numeric(day),
                Day = glue::glue("[{day}]({header})")) %>%
  # add the stars
  dplyr::full_join(stars_df) %>%
  # fill with days not solved
  dplyr::full_join(empty_days_df) %>%
  # replace NA with empty texts so the table looks nice
  tidyr::replace_na(list(`Part 1` = "",
                         `Part 2` = "")) %>%
  # get the empty days number
  dplyr::mutate(Day = dplyr::case_when(
    is.na(Day) ~ glue::glue("{day}"),
    TRUE ~ Day
  )) %>%
  # calculate week
  dplyr::mutate(Week = dplyr::case_when(
    day %% 7 != 0 ~ day %/% 7 + 1,
    TRUE ~ day %/% 7)) %>%
  # select only necessary columns
  dplyr::select(Week, Day, `Part 1`, `Part 2`) %>%
  # use the custom function to create a table per each week
  dplyr::group_by(Week) %>%
  dplyr::group_map(~ hp_table(.x)) %>% 
  data.frame(.) %>% 
  setNames(., paste("Week", 1:4)) %>% 
  # pass to gt
  gt() %>%
  # render cell contents as html
  fmt_markdown(columns = everything()) 
  
```


## Day 1: Calorie Counting

### Part one ⭐

The jungle must be too overgrown and difficult to navigate in vehicles or access from the air; the Elves' expedition traditionally goes on foot. As your boats approach land, the Elves begin taking inventory of their supplies. One important consideration is food - in particular, the number of Calories each Elf is carrying (your puzzle input).

The Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they've brought with them, one item per line. Each Elf separates their own inventory from the previous Elf's inventory (if any) by a blank line.

For example, suppose the Elves finish writing their items' Calories and end up with the following list:

    1000
    2000
    3000

    4000

    5000
    6000

    7000
    8000
    9000

    10000

This list represents the Calories of the food carried by five Elves:

-   The first Elf is carrying food with `1000`, `2000`, and `3000` Calories, a total of `6000` Calories.\
-   The second Elf is carrying one food item with `4000` Calories.\
-   The third Elf is carrying food with `5000` and `6000` Calories, a total of `11000` Calories.\
-   The fourth Elf is carrying food with `7000`, `8000`, and `9000` Calories, a total of `24000` Calories. The fifth Elf is carrying one food item with `10000` Calories. In case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they'd like to know how many Calories are being carried by the Elf carrying the **most** Calories. In the example above, this is `24000` (carried by the fourth Elf).

Find the Elf carrying the most Calories. **How many total Calories is that Elf carrying?**

```{python}
#| results: markup
#| label: solution_1_a
def max_calories_snacks(input_file):
  snacks = []
  i = 0
  start = True
  with open(input_file, "r+") as f:
    lines = [line.rstrip() for line in f]
    for line in lines:
      if line == "":
        i += 1
      else:
        if len(snacks) > i:
          snacks[i].append(int(line))
        else:
          snacks.append([int(line)])
  
  sum_snacks = [sum(snacks_) for snacks_ in snacks]
  max_calories = max(sum_snacks)
  return max_calories

# passing test?
max_calories_snacks("inputs/01_test_case.txt") == 24000
```

```{python}
#| label: answer_1_a
max_calories_snacks("inputs/01_input.txt")
```

**Outcome:** That's the right answer! You are **one gold star** ⭐ closer to collecting enough star fruit.

### Part two ⭐

By the time you calculate the answer to the Elves' question, they've already realized that the Elf carrying the most Calories of food might eventually **run out of snacks**.

To avoid this unacceptable situation, the Elves would instead like to know the total Calories carried by the top three Elves carrying the most Calories. That way, even if one of those Elves runs out of snacks, they still have two backups.

In the example above, the top three Elves are the fourth Elf (with `24000` Calories), then the third Elf (with `11000` Calories), then the fifth Elf (with `10000` Calories). The sum of the Calories carried by these three elves is `45000`.

Find the top three Elves carrying the most Calories. How many Calories are those Elves carrying in total?

```{python}
#| label: solution_1_b
def nmax_calories_snacks(input_file, n):
  snacks = []
  i = 0
  start = True
  with open(input_file, "r+") as f:
    lines = [line.rstrip() for line in f]
    for line in lines:
      if line == "":
        i += 1
      else:
        if len(snacks) > i:
          snacks[i].append(int(line))
        else:
          snacks.append([int(line)])
  
  sum_snacks = [sum(snacks_) for snacks_ in snacks]
  sum_snacks.sort(reverse=True)
  return sum(sum_snacks[:n])

# passing test?
nmax_calories_snacks("inputs/01_test_case.txt", 2) == 35000
```

```{python}
#| label: answer_1_b
nmax_calories_snacks("inputs/01_input.txt", 3)
```

**Outcome:** That's the right answer! You are **one gold star** ⭐ closer to collecting enough star fruit.

## Day 2: Rock Paper Scissors

### Part one ⭐

The Elves begin to set up camp on the beach. To decide whose tent gets to be closest to the snack storage, a giant **Rock Paper Scissors** tournament is already in progress.

Rock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.

Appreciative of your help yesterday, one Elf gives you an **encrypted strategy guide** (your puzzle input) that they say will be sure to help you win. "The first column is what your opponent is going to play: `A` for Rock, `B` for Paper, and `C` for Scissors. The second column--" Suddenly, the Elf is called away to help with someone's tent.

The second column, you reason, must be what you should play in response: `X` for Rock, `Y` for Paper, and `Z` for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.

The winner of the whole tournament is the player with the highest score. Your **total score** is the sum of your scores for each round. The score for a single round is the score for the **shape you selected** (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).

Since you can't be sure if the Elf is trying to help you or trick you, you should calculate the score you would get if you were to follow the strategy guide.

For example, suppose you were given the following strategy guide:

    A Y
    B X
    C Z

This strategy guide predicts and recommends the following:

-   In the first round, your opponent will choose Rock (`A`), and you should choose Paper (`Y`). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won).\
-   In the second round, your opponent will choose Paper (`B`), and you should choose Rock (`X`). This ends in a loss for you with a score of 1 (1 + 0).\
-   The third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6.

In this example, if you were to follow the strategy guide, you would get a total score of **15** (8 + 1 + 6).

**What would your total score be if everything goes exactly according to your strategy guide?**

```{python}
#| label: solution_2_a
def rps(input_file):
  outcomes = {"A": {"X": 3+1, "Y": 6+2, "Z": 0+3}, 
              "B": {"X": 0+1, "Y": 3+2, "Z": 6+3}, 
              "C": {"X": 6+1, "Y": 0+2, "Z": 3+3}}
  scores = []
  with open(input_file, "r+") as f:
    for line in f.readlines():
      game = line.rstrip().split(" ")
      scores.append(outcomes[game[0]][game[1]])
  return sum(scores)
      
rps("inputs/02_test_case.txt") == 15
```

```{python}
#| label: answer_2_a
rps("inputs/02_input.txt")
```

**Outcome:** That's the right answer! You are **one gold star** ⭐ closer to collecting enough star fruit.

### Part two ⭐

The Elf finishes helping with the tent and sneaks back over to you. "Anyway, the second column says how the round needs to end: `X` means you need to lose, `Y` means you need to end the round in a draw, and `Z` means you need to win. Good luck!"

The total score is still calculated in the same way, but now you need to figure out what shape to choose so the round ends as indicated. The example above now goes like this:

-   In the first round, your opponent will choose Rock (`A`), and you need the round to end in a draw (`Y`), so you also choose Rock. This gives you a score of 1 + 3 = **4**.\
-   In the second round, your opponent will choose Paper (`B`), and you choose Rock so you lose (`X`) with a score of 1 + 0 = **1**.\
-   In the third round, you will defeat your opponent's Scissors with Rock for a score of 1 + 6 = **7**.

Now that you're correctly decrypting the ultra top secret strategy guide, you would get a total score of **12**.

Following the Elf's instructions for the second column, **what would your total score be if everything goes exactly according to your strategy guide?**

```{python}
#| label: solution_2_b
def rps_modified(input_file):
  outcomes = {"A": {"X": 0+3, # lose (0) => scissors (3)
                    "Y": 3+1, # draw (3) => rock (1)
                    "Z": 6+2}, # win (6) => paper (2)
              "B": {"X": 0+1, # lose => rock (1)
                    "Y": 3+2, # draw => paper (2)
                    "Z": 6+3}, # win => scissors (3)
              "C": {"X": 0+2, # lose => paper (2)
                    "Y": 3+3, # draw  => scissors (3)
                    "Z": 6+1}} # win => rock (1)
  scores = []
  with open(input_file, "r+") as f:
    for line in f.readlines():
      game = line.rstrip().split(" ")
      scores.append(outcomes[game[0]][game[1]])
  return sum(scores)

# does it pass test case?  
rps_modified("inputs/02_test_case.txt") == 12
```

```{python}
#| label: answer_2_b
rps_modified("inputs/02_input.txt")
```

**Outcome:** That's the right answer! You are **one gold star** ⭐ closer to collecting enough star fruit.

## Day 3: Rucksack Reorganization

### Part one ⭐

One Elf has the important job of loading all of the rucksacks with supplies for the jungle journey. Unfortunately, that Elf didn't quite follow the packing instructions, and so a few items now need to be rearranged.

Each rucksack has two large **compartments**. All items of a given type are meant to go into exactly one of the two compartments. The Elf that did the packing failed to follow this rule for exactly one item type per rucksack.

The Elves have made a list of all of the items currently in each rucksack (your puzzle input), but they need your help finding the errors. Every item type is identified by a single lowercase or uppercase letter (that is, a and A refer to different types of items).

The list of items for each rucksack is given as characters all on a single line. A given rucksack always has the same number of items in each of its two compartments, so the first half of the characters represent items in the first compartment, while the second half of the characters represent items in the second compartment.

For example, suppose you have the following list of contents from six rucksacks:

    vJrwpWtwJgWrhcsFMMfFFhFp
    jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL
    PmmdzqPrVvPwwTWBwg
    wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn
    ttgJtRGJQctTZtZT
    CrZsJsPPZsGzwwsLwLmpwMDw

-   The first rucksack contains the items `vJrwpWtwJgWrhcsFMMfFFhFp`, which means its first compartment contains the items `vJrwpWtwJgWr`, while the second compartment contains the items `hcsFMMfFFhFp`. The only item type that appears in both compartments is lowercase `p`.\
-   The second rucksack's compartments contain `jqHRNqRjqzjGDLGL` and `rsFMfFZSrLrFZsSL`. The only item type that appears in both compartments is uppercase `L`.\
-   The third rucksack's compartments contain `PmmdzqPrV` and `vPwwTWBwg`; the only common item type is uppercase `P`.\
-   The fourth rucksack's compartments only share item type `v`.\
-   The fifth rucksack's compartments only share item type `t`.\
-   The sixth rucksack's compartments only share item type `s`.

To help prioritize item rearrangement, every item type can be converted to a **priority**:

-   Lowercase item types `a` through `z` have priorities 1 through 26.\
-   Uppercase item types `A` through `Z` have priorities 27 through 52.

In the above example, the priority of the item type that appears in both compartments of each rucksack is 16 (`p`), 38 (`L`), 42 (`P`), 22 (`v`), 20 (`t`), and 19 (`s`); the sum of these is **157**.

Find the item type that appears in both compartments of each rucksack. **What is the sum of the priorities of those item types?**

```{python}
#| label: solution_3_a
def rucksuck(input_file):
  prior_sum = 0
  with open(input_file, "r+") as f:
    for line in f.readlines():
      inside = [el for el in line.rstrip()]
      # get unique items of each compartment
      comp1 = set(inside[:len(inside)//2])
      comp2 = set(inside[len(inside)//2:])
      # get the element that is common
      el = list(comp1.intersection(comp2))[0]
      if el == el.upper():
        p = ord(el) - 65 + 27
      else:
        p = ord(el) - 97 + 1
      # add the priority to the sum
      prior_sum += p
  return prior_sum

rucksuck("inputs/03_test_case.txt") == 157
```

```{python}
#| label: answer_3_a
rucksuck("inputs/03_input.txt")
```

**Outcome:** That's the right answer! You are **one gold star** ⭐ closer to collecting enough star fruit.

### Part two ⭐

As you finish identifying the misplaced items, the Elves come to you with another issue.

For safety, the Elves are divided into groups of three. Every Elf carries a badge that identifies their group. For efficiency, within each group of three Elves, the badge is the **only item type carried by all three Elves**. That is, if a group's badge is item type `B`, then all three Elves will have item type `B` somewhere in their rucksack, and at most two of the Elves will be carrying any other item type.

The problem is that someone forgot to put this year's updated authenticity sticker on the badges. All of the badges need to be pulled out of the rucksacks so the new authenticity stickers can be attached.

Additionally, nobody wrote down which item type corresponds to each group's badges. The only way to tell which item type is the right one is by finding the one item type that is **common between all three Elves** in each group.

Every set of three lines in your list corresponds to a single group, but each group can have a different badge item type. So, in the above example, the first group's rucksacks are the first three lines:

    vJrwpWtwJgWrhcsFMMfFFhFp
    jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL
    PmmdzqPrVvPwwTWBwg

And the second group's rucksacks are the next three lines:

    wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn
    ttgJtRGJQctTZtZT
    CrZsJsPPZsGzwwsLwLmpwMDw

In the first group, the only item type that appears in all three rucksacks is lowercase `r`; this must be their badges. In the second group, their badge item type must be `Z`.

Priorities for these items must still be found to organize the sticker attachment efforts: here, they are 18 (`r`) for the first group and 52 (`Z`) for the second group. The sum of these is **70**.

Find the item type that corresponds to the badges of each three-Elf group. **What is the sum of the priorities of those item types?**

```{python}
#| label: solution_3_b
def rucksuck_badges(input_file):
  cc = set()
  elves = 0
  prior_sum = 0
  with open(input_file, "r+") as f:
    for line in f.readlines():
      carryon = set([el for el in line.rstrip()])
      
      elves += 1
      
      cc = carryon if elves % 3 == 1 else cc.intersection(carryon)
      
      if (elves % 3 == 0):
        
        badge = list(cc)[0]
        cc = set() 
        
        if badge == badge.upper():
          p = ord(badge) - 65 + 27
          
        else:
          p = ord(badge) - 97 + 1
        
        # add the priority to the sum
        prior_sum += p
        
  return prior_sum

# does it pass test?
rucksuck_badges("inputs/03_test_case.txt") == 70
```

```{python}
#| label: answer_3_b
rucksuck_badges("inputs/03_input.txt") 
```

**Outcome:** That's the right answer! You are **one gold star** ⭐ closer to collecting enough star fruit.

## Day 4: Camp Cleanup

### Part one ⭐ 

Space needs to be cleared before the last supplies can be unloaded from the ships, and so several Elves have been assigned the job of cleaning up sections of the camp. Every section has a unique **ID number**, and each Elf is assigned a range of section IDs.

However, as some of the Elves compare their section assignments with each other, they've noticed that many of the assignments **overlap**. To try to quickly find overlaps and reduce duplicated effort, the Elves pair up and make a **big list of the section assignments for each pair** (your puzzle input).

For example, consider the following list of section assignment pairs:

```
2-4,6-8
2-3,4-5
5-7,7-9
2-8,3-7
6-6,4-6
2-6,4-8
```

For the first few pairs, this list means:

* Within the first pair of Elves, the first Elf was assigned sections `2-4` (sections `2`, `3`, and `4`), while the second Elf was assigned sections `6-8` (sections `6`, `7`, `8`).  
* The Elves in the second pair were each assigned two sections.  
* The Elves in the third pair were each assigned three sections: one got sections `5`, `6`, and `7`, while the other also got `7`, plus `8` and `9`.

This example list uses single-digit section IDs to make it easier to draw; your actual list might contain larger numbers. Visually, these pairs of section assignments look like this:

```
.234.....  2-4
.....678.  6-8

.23......  2-3
...45....  4-5

....567..  5-7
......789  7-9

.2345678.  2-8
..34567..  3-7

.....6...  6-6
...456...  4-6

.23456...  2-6
...45678.  4-8
```

Some of the pairs have noticed that one of their assignments **fully contains the other**. For example, `2-8` fully contains `3-7`, and `6-6` is fully contained by `4-6`. In pairs where one assignment fully contains the other, one Elf in the pair would be exclusively cleaning sections their partner will already be cleaning, so these seem like the most in need of reconsideration. In this example, there are 2 such pairs.

**In how many assignment pairs does one range fully contain the other?**

```{python}
#| label: solution_4_a
# Define wrapper for checking test case
def test_case(cmd, result):
  assert cmd == result, f"Should be {result}, is {cmd}"

def compare_ranges(range1, range2):
  r1 = [int(el) for el in range1.split("-")]
  r2 = [int(el) for el in range2.split("-")]
  
  if ((r1[0] >= r2[0]) & (r1[1] <= r2[1])):
    return True
  
  elif ((r2[0] >= r1[0]) & (r2[1] <= r1[1])):
    return True
  
  else:
    return False

test_case(compare_ranges("1-3", "2-5"), False)
test_case(compare_ranges("1-6", "2-5"), True)
  
def camp_cleanup(input_file):
  with open(input_file, "r+") as f:
    ranges = [line.split(",") for line in f.readlines()]
    
    fully_contain = [compare_ranges(r[0], r[1]) for r in ranges]
    
    return sum(fully_contain)
  
test_case(camp_cleanup("inputs/04_test_case.txt"), 2)
```


```{python}
#| label: answer_4_a
camp_cleanup("inputs/04_input.txt")
```

**Outcome:** That's the right answer! You are **one gold star** ⭐ closer to collecting enough star fruit.


### Part Two ⭐ 

It seems like there is still quite a bit of duplicate work planned. Instead, the Elves would like to know the number of pairs that **overlap at all**.

In the above example, the first two pairs (`2-4`,`6-8` and `2-3`,`4-5`) don't overlap, while the remaining four pairs (`5-7`,`7-9`, `2-8`,`3-7`, `6-6`,`4-6`, and `2-6`,`4-8`) do overlap:

* `5-7`,`7-9` overlaps in a single section, `7`.
* `2-8`,`3-7` overlaps all of the sections `3` through `7`.
* `6-6`,`4-6` overlaps in a single section, `6`.
* `2-6`,`4-8` overlaps in sections `4`, `5`, and `6`.

So, in this example, the number of overlapping assignment pairs is **4**.

**In how many assignment pairs do the ranges overlap?**

```{python}
#| label: solution_4_b
# this solution also covers part 1
def compare_ranges_p2(range1, range2, fully=True):
  r1 = [int(el) for el in range1.split("-")]
  r1 = set(range(r1[0], r1[1] + 1))
  
  r2 = [int(el) for el in range2.split("-")]
  r2 = set(range(r2[0], r2[1] + 1))
  
  # get the intersection
  inter = r1.intersection(r2)
  
  # if interested in fully only, check if intersection 
  # is the size of smaller set
  if ((fully) & (len(inter) == min(len(r1), len(r2)))):
    return True
  
  # if any overlap, check if intersection non empty
  if ((not fully) & (len(inter) > 0)):
    return True
  
  # all other case mean no overlap
  return False

# check if part 1 would be good
test_case(compare_ranges_p2("1-3", "2-5"), False)
# check the test cases for not fully overlapping
test_case(compare_ranges_p2("1-3", "2-5", fully=False), True)
test_case(compare_ranges_p2("1-3", "4-5", fully=False), False)


def camp_cleanup_p2(input_file, fully=True):
  with open(input_file, "r+") as f:
    ranges = [line.split(",") for line in f.readlines()]
    
    overlaps = [compare_ranges_p2(r[0], r[1], fully) for r in ranges]
    
    return sum(overlaps)
  
test_case(camp_cleanup_p2("inputs/04_test_case.txt"), 2)
test_case(camp_cleanup_p2("inputs/04_test_case.txt", fully=False), 4)
```


```{python}
#| label: answer_4_b
camp_cleanup_p2("inputs/04_input.txt", fully=False)
```
**Outcome:** That's the right answer! You are **one gold star** ⭐ closer to collecting enough star fruit.
