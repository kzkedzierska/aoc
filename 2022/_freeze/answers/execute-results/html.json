{
  "hash": "d220e04ac2ea9aed22e8a54727ec6ec0",
  "result": {
    "markdown": "---\ntitle: \"Advent of Code 2022\"\nauthor: \"Kasia Kedzierska\"\ndate: last-modified\nformat: \n  html:\n    toc: true\n    toc-location: left\n---\n\n## Day 1: Calorie Counting\n\n### Part one ⭐\n\nThe jungle must be too overgrown and difficult to navigate in vehicles or access from the air; the Elves' expedition traditionally goes on foot. As your boats approach land, the Elves begin taking inventory of their supplies. One important consideration is food - in particular, the number of Calories each Elf is carrying (your puzzle input).\n\nThe Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they've brought with them, one item per line. Each Elf separates their own inventory from the previous Elf's inventory (if any) by a blank line.\n\nFor example, suppose the Elves finish writing their items' Calories and end up with the following list:\n\n    1000\n    2000\n    3000\n\n    4000\n\n    5000\n    6000\n\n    7000\n    8000\n    9000\n\n    10000\n\nThis list represents the Calories of the food carried by five Elves:\n\n-   The first Elf is carrying food with `1000`, `2000`, and `3000` Calories, a total of `6000` Calories.\\\n-   The second Elf is carrying one food item with `4000` Calories.\\\n-   The third Elf is carrying food with `5000` and `6000` Calories, a total of `11000` Calories.\\\n-   The fourth Elf is carrying food with `7000`, `8000`, and `9000` Calories, a total of `24000` Calories. The fifth Elf is carrying one food item with `10000` Calories. In case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they'd like to know how many Calories are being carried by the Elf carrying the **most** Calories. In the example above, this is `24000` (carried by the fourth Elf).\n\nFind the Elf carrying the most Calories. **How many total Calories is that Elf carrying?**\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\ndef max_calories_snacks(input_file):\n  snacks = []\n  i = 0\n  start = True\n  with open(input_file, \"r+\") as f:\n    lines = [line.rstrip() for line in f]\n    for line in lines:\n      if line == \"\":\n        i += 1\n      else:\n        if len(snacks) > i:\n          snacks[i].append(int(line))\n        else:\n          snacks.append([int(line)])\n  \n  sum_snacks = [sum(snacks_) for snacks_ in snacks]\n  max_calories = max(sum_snacks)\n  return(max_calories)\n\n# passing test?\nmax_calories_snacks(\"day_01/test_case.txt\") == 24000\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nmax_calories_snacks(\"day_01/input.txt\")\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n69528\n```\n:::\n:::\n\n\n**Outcome:** That's the right answer! You are **one gold star** ⭐ closer to collecting enough star fruit.\n\n### Part two ⭐\n\nBy the time you calculate the answer to the Elves' question, they've already realized that the Elf carrying the most Calories of food might eventually **run out of snacks**.\n\nTo avoid this unacceptable situation, the Elves would instead like to know the total Calories carried by the top three Elves carrying the most Calories. That way, even if one of those Elves runs out of snacks, they still have two backups.\n\nIn the example above, the top three Elves are the fourth Elf (with `24000` Calories), then the third Elf (with `11000` Calories), then the fifth Elf (with `10000` Calories). The sum of the Calories carried by these three elves is `45000`.\n\nFind the top three Elves carrying the most Calories. How many Calories are those Elves carrying in total?\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef nmax_calories_snacks(input_file, n):\n  snacks = []\n  i = 0\n  start = True\n  with open(input_file, \"r+\") as f:\n    lines = [line.rstrip() for line in f]\n    for line in lines:\n      if line == \"\":\n        i += 1\n      else:\n        if len(snacks) > i:\n          snacks[i].append(int(line))\n        else:\n          snacks.append([int(line)])\n  \n  sum_snacks = [sum(snacks_) for snacks_ in snacks]\n  sum_snacks.sort(reverse=True)\n  return(sum(sum_snacks[:n]))\n\n# passing test?\nnmax_calories_snacks(\"day_01/test_case.txt\", 2) == 35000\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nnmax_calories_snacks(\"day_01/input.txt\", 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n206152\n```\n:::\n:::\n\n\n**Outcome:** That's the right answer! You are **one gold star** ⭐ closer to collecting enough star fruit.\n\n## Day 2: Rock Paper Scissors\n\n### Part one ⭐\n\nThe Elves begin to set up camp on the beach. To decide whose tent gets to be closest to the snack storage, a giant **Rock Paper Scissors** tournament is already in progress.\n\nRock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.\n\nAppreciative of your help yesterday, one Elf gives you an **encrypted strategy guide** (your puzzle input) that they say will be sure to help you win. \"The first column is what your opponent is going to play: `A` for Rock, `B` for Paper, and `C` for Scissors. The second column--\" Suddenly, the Elf is called away to help with someone's tent.\n\nThe second column, you reason, must be what you should play in response: `X` for Rock, `Y` for Paper, and `Z` for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.\n\nThe winner of the whole tournament is the player with the highest score. Your **total score** is the sum of your scores for each round. The score for a single round is the score for the **shape you selected** (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\n\nSince you can't be sure if the Elf is trying to help you or trick you, you should calculate the score you would get if you were to follow the strategy guide.\n\nFor example, suppose you were given the following strategy guide:\n\n    A Y\n    B X\n    C Z\n\nThis strategy guide predicts and recommends the following:\n\n-   In the first round, your opponent will choose Rock (`A`), and you should choose Paper (`Y`). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won).\\\n-   In the second round, your opponent will choose Paper (`B`), and you should choose Rock (`X`). This ends in a loss for you with a score of 1 (1 + 0).\\\n-   The third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6.\n\nIn this example, if you were to follow the strategy guide, you would get a total score of **15** (8 + 1 + 6).\n\n**What would your total score be if everything goes exactly according to your strategy guide?**\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndef rps(input_file):\n  outcomes = {\"A\": {\"X\": 3+1, \"Y\": 6+2, \"Z\": 0+3}, \n              \"B\": {\"X\": 0+1, \"Y\": 3+2, \"Z\": 6+3}, \n              \"C\": {\"X\": 6+1, \"Y\": 0+2, \"Z\": 3+3}}\n  scores = []\n  with open(input_file, \"r+\") as f:\n    for line in f.readlines():\n      game = line.rstrip().split(\" \")\n      scores.append(outcomes[game[0]][game[1]])\n  return(sum(scores))\n      \nrps(\"day_02/test_case.txt\") == 15\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nrps(\"day_02/input.txt\")\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n14264\n```\n:::\n:::\n\n\n**Outcome:** That's the right answer! You are **one gold star** ⭐ closer to collecting enough star fruit.\n\n### Part two \n\nThe Elf finishes helping with the tent and sneaks back over to you. \"Anyway, the second column says how the round needs to end: `X` means you need to lose, `Y` means you need to end the round in a draw, and `Z` means you need to win. Good luck!\"\n\nThe total score is still calculated in the same way, but now you need to figure out what shape to choose so the round ends as indicated. The example above now goes like this:\n\nIn the first round, your opponent will choose Rock (A), and you need the round to end in a draw (Y), so you also choose Rock. This gives you a score of 1 + 3 = 4.\nIn the second round, your opponent will choose Paper (B), and you choose Rock so you lose (X) with a score of 1 + 0 = 1.\nIn the third round, you will defeat your opponent's Scissors with Rock for a score of 1 + 6 = 7.\nNow that you're correctly decrypting the ultra top secret strategy guide, you would get a total score of 12.\n\nFollowing the Elf's instructions for the second column, what would your total score be if everything goes exactly according to your strategy guide?\n\nTESTING GITHUB ACTIONS\n\n",
    "supporting": [
      "answers_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}